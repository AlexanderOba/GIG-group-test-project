{"version":3,"sources":["Components/NavBar.tsx","constants/action_types.js","Actions/country_actions.js","Components/ListOfCountries.tsx","Components/Home.tsx","Components/country_detailspg.tsx","App.tsx","serviceWorker.ts","Reducers/country_reducer.js","Reducers/index.js","store.ts","index.tsx"],"names":["NavBar","className","aria-hidden","ActionTypes","setCountries","countries","type","payload","setCountryDetails","country","ListOfCountries","useSelector","state","countryReducer","renderList","map","index","flags","name","region","population","capital","Col","md","key","to","common","src","png","alt","Object","keys","length","Home","dispatch","useDispatch","useEffect","window","scrollTo","a","async","axios","get","then","response","console","log","data","catch","err","filterRegion","Container","fluid","onChange","e","target","value","placeholder","Form","Group","controlId","Control","as","onClick","Row","Country_details","props","languages","currencies","subregion","tld","match","params","official","borders","item","i","App","path","component","Component","Boolean","location","hostname","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe80a7d8.chunk.js","sourcesContent":["import React from \"react\"\r\nimport './home.css';\r\n\r\n\r\n\r\n\r\nconst NavBar = ()=>{\r\n    return(\r\n        <>\r\n          <div className=\"navbarwraper\">\r\n              <div className=\"navdiv1\">Where in the world?</div>\r\n              <div className=\"navdiv2\"><i className=\"fa fa-moon-o\" aria-hidden=\"true\"></i> Dark Mode</div>\r\n          </div>\r\n        </>\r\n    )\r\n}\r\nexport default NavBar;","export const ActionTypes = {\n  GET_COUNTRIES: \"GET_COUNTRIES\",\n  SELECTED_COUNTRY: \"SELECTED_COUNTRY\",\n  SELECTED_REGION: \"SELECTED_REGION\",\n};\n","import { ActionTypes } from \"../constants/action_types\"\n\n\n\nexport const setCountries = (countries) =>{\n  return {\n     type: ActionTypes.GET_COUNTRIES,\n     payload: countries\n  }\n}\n\n\nexport const setCountryDetails = (country) =>{\n  return {\n     type: ActionTypes.SELECTED_COUNTRY,\n     payload: country\n  }\n}\n","import React from \"react\";\r\nimport \"./home.css\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ListOfCountries = () => {\r\n  const countries = useSelector(state => state.countryReducer.countries);\r\n  const renderList = countries.map((country, index) => {\r\n    const { flags, name, region, population, capital } = country;\r\n    return (\r\n      <>\r\n        <Col md={3} key={index}>\r\n          <Link to={`/country_details/${name.common}`}>\r\n            <div className=\"country-card\">\r\n              <div className=\"card-img\">\r\n                <img src={flags.png} className=\"cntlistimg-fluid\" alt=\"img\" />\r\n              </div>\r\n              <div className=\"detail-wraper\">\r\n                <h6 className=\"card-country\">{name.common}</h6>\r\n                <p className=\"card-details\">\r\n                  Population:<span> {population}</span>\r\n                </p>\r\n                <p className=\"card-details\">\r\n                  Region:<span> {region}</span>\r\n                </p>\r\n                <p className=\"card-details\">\r\n                  Capital:<span> {capital}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n        </Col>\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {Object.keys(countries).length === 0 ? (\r\n        <div className=\"loadinwraper text-center\"> Loading please wait...</div>\r\n      ) : (\r\n       renderList \r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ListOfCountries;\r\n","import React,{ useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./home.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport NavBar from \"./NavBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { setCountries } from \"../Actions/country_actions\"\r\nimport ListOfCountries from \"./ListOfCountries\";\r\n\r\n\r\nconst Home = () => {\r\nconst countries = useSelector( (state) => state.countryReducer.countries); \r\n\r\nconst dispatch = useDispatch();\r\nconst fetchCountries = async ()=> {\r\n  await axios.get(\"https://restcountries.com/v3.1/all\")\r\n  .then((response)=>{\r\n    console.log(response.data)\r\n    dispatch (setCountries(response.data))\r\n  })  \r\n  .catch((err)=>{\r\n    console.log(\"err\", err)\r\n  });\r\n  \r\n}\r\nuseEffect(()=>{\r\n  window.scrollTo(-0, -0);\r\n   fetchCountries();\r\n}, [])\r\nconsole.log(countries)\r\n\r\n//filter countries by region\r\n\r\nconst filterRegion = async (region) =>{\r\n  console.log(\"i was clicked\", region)\r\n  await axios.get(`https://restcountries.com/v3.1/region/${region}`)\r\n  .then((response)=>{\r\n    console.log(response.data)\r\n    dispatch (setCountries(response.data))\r\n  })  \r\n  .catch((err)=>{\r\n    console.log(\"err\", err)\r\n  });\r\n  \r\n}\r\n//filter countries by fullname\r\nconst filterCountryName = async (name) =>{\r\n  await axios.get(`https://restcountries.com/v3.1/name/${name}`)\r\n  .then((response)=>{\r\n    console.log(response.data)\r\n    dispatch (setCountries(response.data))\r\n  })  \r\n  .catch((err)=>{\r\n    console.log(\"err\", err)\r\n  });\r\n  \r\n}\r\n\r\nconsole.log(countries)\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <Container fluid className=\"hmpgcontainer\">\r\n        <div className=\"hmepgbdywrap\">\r\n          <div className=\"hmpginputwrap\">\r\n            <div className=\"sercinptdiv\">\r\n              <input\r\n                type=\"search\"\r\n                className=\"searchinput\"\r\n                onChange={(e) => filterCountryName( e.target.value)}\r\n                placeholder=\"Search for a country..\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Form.Group controlId=\"formBasicEmail1\" className=\"diff23\">\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  className=\" form-control hmpginputselect\"\r\n                  name=\"Filter by Region\"\r\n                  onChange={(e) => filterRegion( e.target.value)}\r\n                >\r\n                  <option className=\"selectopt\">Filter by Region</option>\r\n                  <option className=\"selectopt\" value=\"Africa\" onClick={()=>filterRegion(\"Africa\")}>\r\n                    Africa\r\n                  </option>\r\n                  <option className=\"selectopt\" value=\"Europe\" onClick={()=>filterRegion(\"Europe\")}>\r\n                    Europe\r\n                  </option>\r\n                  <option className=\"selectopt\" value=\"Asia\" onClick={()=>filterRegion(\"Asia\")}>\r\n                    Asia\r\n                  </option>\r\n                  <option className=\"selectopt\" value=\"Americas\" onClick={()=>filterRegion(\"Americas\")}>\r\n                    Americas\r\n                  </option>\r\n                  <option className=\"selectopt\" value=\"Oceania\" onClick={()=>filterRegion(\"Oceania\")}>\r\n                    Oceania\r\n                  </option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </div>\r\n          </div>\r\n          <Row className=\"homepgrow\">\r\n            <ListOfCountries/>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\nexport default Home;\r\n","import React,{useEffect} from \"react\";\r\nimport \"./home.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport NavBar from \"./NavBar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { setCountryDetails } from \"../Actions/country_actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst Country_details =(props) => {\r\n  const country = useSelector( (state) => state.country)\r\n\r\n  const {\r\n     flags,\r\n     name,\r\n     region,\r\n     population,\r\n     capital,\r\n     languages,\r\n     subregion,\r\n     currencies,\r\n     tld \r\n    } = country;\r\n\r\n  const dispatch = useDispatch();\r\n  const fetchCountryDetail = async() =>{\r\n     await axios.get(`https://restcountries.com/v3.1/name/${props.match.params.name}`)\r\n     .then((response)=>{\r\n       console.log(response.data)\r\n       dispatch(setCountryDetails(response.data))\r\n     })\r\n     .catch((err)=>{\r\n      console.log(\"err\", err)\r\n     })\r\n  } \r\n useEffect(()=>{\r\n    window.scrollTo(-0, -0);\r\n  fetchCountryDetail()\r\n }, [])\r\n\r\n  console.log(country?.country?.[0].name.official) \r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <Container fluid className=\"hmpgcontainer\">\r\n        <div className=\"hmepgbdywrap\">\r\n          <div>\r\n            <Link to=\"/\">\r\n              <span className=\"bckbtn\">\r\n                <span>&larr;</span>Back\r\n              </span>\r\n            </Link>\r\n          </div>\r\n          <Row>\r\n            <Col md={6}>\r\n              <div className=\"countrydetflag\">\r\n              <img src={country?.country?.[0].flags.png} className=\"img-fluid cntdetflag\" alt=\"image\"/>\r\n              </div>\r\n            </Col>\r\n            <Col md={6}>\r\n              <div className=\"etcol2wrap\">\r\n                <h2 className=\"contryName\">{name}</h2>\r\n                <div className=\"contrypgdetailcontn\">\r\n                  <div>\r\n                    <p className=\"card-details\">\r\n                      Native Name:<span>{country?.country?.[0].name.official}</span>\r\n                    </p>\r\n                    <p className=\"card-details\">\r\n                      Population:<span> {country?.country?.[0].population} </span>\r\n                    </p>\r\n                    <p className=\"card-details\">\r\n                      Region:<span> {country?.country?.[0].region}</span>\r\n                    </p>\r\n                    <p className=\"card-details\">\r\n                      Sub Region:<span> {country?.country?.[0].subregion} </span>\r\n                    </p>\r\n                    <p className=\"card-details\">\r\n                      Capital:<span> {country?.country?.[0].capital}</span>\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"contrypgdetailcontndiv2\">\r\n                    <p className=\"card-details\">\r\n                      Top Level Domain:<span> {tld}</span>\r\n                    </p>\r\n                    <p className=\"card-details\">\r\n                      Currencies:<span> {currencies} </span>\r\n                    </p>\r\n                    <p className=\"card-details\">\r\n                      Languages:<span> {languages} </span>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <div className=\"card-details\">\r\n                    <div className= \"bordercountrieswraper\">\r\n                      <div className=\"bordertitle\">Border Countries:</div>\r\n                      {country?.country?.[0]?.borders?.map((item, i)=>{\r\n                        return (\r\n                        <div className=\"bordercountriesbtn\" key={i}>{item}</div>\r\n                        )\r\n                      })  \r\n                      }\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\nexport default Country_details;\r\n","import React, { Component } from \"react\";\r\nimport { Switch, Route, BrowserRouter,HashRouter } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Home from \"./Components/Home\";\r\nimport Country_details from \"./Components/country_detailspg\"\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <HashRouter>\r\n            <Switch>\r\n              <Route path=\"/country_details/:name\" component={Country_details} />\r\n              <Route path=\"/\" component={Home} />\r\n            </Switch>\r\n          </HashRouter>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // console.log(\r\n          //   'This web app is being served cache-first by a service ' +\r\n          //     'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          // );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              // console.log(\r\n              //   'New content is available and will be used when all ' +\r\n              //     'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              // );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              // console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // console.log(\r\n      //   'No internet connection found. App is running in offline mode.'\r\n      // );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { ActionTypes } from \"../constants/action_types\"\n\nconst initialState = {\n    countries: []\n}\n\nexport const countryReducer = (state = initialState, action) =>{\n       switch (action.type){\n           case ActionTypes.GET_COUNTRIES:\n           return {\n               ...state,\n               countries: action.payload\n            };\n            default:\n            return state;\n        }\n}\n\nexport const selectedCountryReducer = (state = {}, action) =>{\n    switch (action.type){\n        case ActionTypes.SELECTED_COUNTRY:\n        return {\n            ...state,\n            country: action.payload\n         };\n        default:\n        return state;\n    }\n}\n\n\n\n\n\n","import { combineReducers } from \"redux\";\nimport { countryReducer, selectedCountryReducer } from \"./country_reducer\";\n\nconst rootReducer = combineReducers({\n     countryReducer,\n     country:selectedCountryReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './Reducers';\n\n\ndeclare global {\n    interface Window { __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any; }\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(\n        thunkMiddleware,\n    ))\n);\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\nimport { HashRouter as Switch, Route, BrowserRouter, HashRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n     <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}